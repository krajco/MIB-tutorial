/*
 * Note: this file originally auto-generated by mib2c
 * using mfd-top.m2c
 */
#ifndef IOTUSERTABLE_H
#define IOTUSERTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(IOT-MIB)
config_require(IOT-MIB/iotUserTable/iotUserTable_interface)
config_require(IOT-MIB/iotUserTable/iotUserTable_data_access)
config_require(IOT-MIB/iotUserTable/iotUserTable_data_get)
config_require(IOT-MIB/iotUserTable/iotUserTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for iotUserTable */
#include "iotUserTable_oids.h"

/* enum definions */
#include "iotUserTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_iotUserTable(void);
void shutdown_iotUserTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table iotUserTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * IOT-MIB::iotUserTable is subid 1 of Tables.
 * Its status is Current.
 * OID: .1.3.6.1.3.9999.2.1, length: 8
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review iotUserTable registration context.
     */
typedef netsnmp_data_list iotUserTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review iotUserTable data context structure.
 * This structure is used to represent the data for iotUserTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * iotUserTable.
 */
typedef struct iotUserTable_data_s {
    
        /*
         * ROIntCol2(2)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   ROIntCol2;
    
} iotUserTable_data;


/*
 * TODO:120:r: |-> Review iotUserTable mib index.
 * This structure is used to represent the index for iotUserTable.
 */
typedef struct iotUserTable_mib_index_s {

        /*
         * ROStringCol1(1)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        /** 128 - 0(other indexes) - oid length(10) = 117 */
   char   ROStringCol1[117];
   size_t      ROStringCol1_len;


} iotUserTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review iotUserTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     *
     * BE VERY CAREFUL TO TAKE INTO ACCOUNT THE MAXIMUM
     * POSSIBLE LENGHT FOR EVERY VARIABLE LENGTH INDEX!
     * Guessing 128 - col/entry(2)  - oid len(8)
*/
#define MAX_iotUserTable_IDX_LEN     118


/* *********************************************************************
 * TODO:130:o: |-> Review iotUserTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * iotUserTable_rowreq_ctx pointer.
 */
typedef struct iotUserTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_iotUserTable_IDX_LEN];
    
    iotUserTable_mib_index        tbl_idx;
    
    iotUserTable_data              data;

    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to iotUserTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *iotUserTable_data_list;

} iotUserTable_rowreq_ctx;

typedef struct iotUserTable_ref_rowreq_ctx_s {
    iotUserTable_rowreq_ctx *rowreq_ctx;
} iotUserTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int iotUserTable_pre_request(iotUserTable_registration * user_context);
    int iotUserTable_post_request(iotUserTable_registration * user_context,
        int rc);

    int iotUserTable_rowreq_ctx_init(iotUserTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void iotUserTable_rowreq_ctx_cleanup(iotUserTable_rowreq_ctx *rowreq_ctx);


    iotUserTable_rowreq_ctx *
                  iotUserTable_row_find_by_mib_index(iotUserTable_mib_index *mib_idx);

extern const oid iotUserTable_oid[];
extern const int iotUserTable_oid_size;


#include "iotUserTable_interface.h"
#include "iotUserTable_data_access.h"
#include "iotUserTable_data_get.h"
#include "iotUserTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* IOTUSERTABLE_H */
/** @} */
